#Libraries

from haversine import haversine
import plotly.express as px
import plotly.graph_objects as go

#bibliotecas necess√°rias 
import folium
import pandas as pd
from datetime import datetime
import streamlit as st
from PIL import Image
from streamlit_folium import folium_static

st.set_page_config( page_title='Vis√£o Empresa', page_icon='üìà', layout= 'wide' )

# -------------------------------------------
# Fun√ß√µes
# -------------------------------------------

def country_maps (df1):
        
       
    cols = ['City', 'Road_traffic_density', 'Delivery_location_latitude' , 'Delivery_location_longitude' ]
        
        
    df_aux = (df1.loc[:, cols].groupby(['City', 'Road_traffic_density'] ).median().reset_index())
        
    #Pego a mediana e n√£o a m√©dia, a mediana √© o pr√≥prio n√∫mero no conjunto de dados.
                
    map = folium.Map() #porem √© o mapa vazio, preciso colocar os pontos
                
    for index, location_info in df_aux.iterrows():
        folium.Marker([location_info['Delivery_location_latitude'], 
                       location_info['Delivery_location_longitude']], 
                       popup=location_info[['City', 'Road_traffic_density']]).add_to(map)
    folium_static ( map, width=1024 , height =600 ) #exibir mapa , se n√£o ele n√£o vai funcionar

        

def order_share_by_week (df1):
           
    cols = ['ID' ,'week_of_year']
    df_aux01 = df1.loc[:, cols].groupby(['week_of_year' ] ).count().reset_index()      
    cols01 = ['week_of_year', 'Delivery_person_ID']
    df_aux02 = (df1.loc[:, cols01]
                .groupby(['week_of_year' ] )
                .nunique()
                .reset_index())
            
    #Eu preciso juntar as coisas, √© uma coisa nova que n√£o sei, vou juntar dois Dataframes
    #Vamos usar uma biblioteca e o comando HOW, como eu vou juntar duas coisas
            
    df_aux= pd.merge(df_aux01 , df_aux02, how='inner')
            
    #Agora eu posso dividir e criar uma nova coluna que √© a Order_by_deliver
            
    df_aux['Order_by_deliver'] = df_aux['ID'] / df_aux['Delivery_person_ID']
            
    #Gr√°fico
            
    fig = px.line(df_aux, x='week_of_year' , y= 'Order_by_deliver')

    return fig
       

def order_by_week(df1):
            
    #aqui eu preciso calcular a semana, n√£o tenho a coluna que indica o n√∫mero da semana, preciso fazer isso
            
    #cria a coluna de semana do ano, no caso o n√∫mero, ai fa√ßo o df1['week_of_year']
    #Depois o Df1 vai receber o resultado da opera√ß√£o df1['Order_Date'].dt.strftime( '%U' )
    #Onde dt √© para transformar de series em data, strftime formata Order_Data no tempo o %U a semana come√ßa  no Domingo se for %W come√ßa na segunda
            
    df1['week_of_year'] = df1['Order_Date'].dt.strftime( '%U' )
            
    cols = ['ID' ,'week_of_year']
    df_aux = df1.loc[:, cols].groupby(['week_of_year' ] ).count().reset_index()
            
    fig = px.line(df_aux, x= 'week_of_year' , y='ID')

    return fig

def traffic_order_city(df1):
                
    cols = ['ID' ,'City', 'Road_traffic_density' ]
    
    df_aux = (df1.loc[:, cols]
                 .groupby(['City', 'Road_traffic_density'] )
                 .count()
                 .reset_index())          
                
    fig = px.scatter(df_aux, x='City', y= 'Road_traffic_density' , size='ID', color='City') #Size da o tamanho da bolha

    return fig

def traffic_order_share (df1):
                
    #aqui preciso fazer uma manobra para c√°lcular
    
    cols = ['ID' ,'Road_traffic_density']
                
    df_aux = (df1.loc[:, cols]
                 .groupby(['Road_traffic_density'] )
                 .count()
                 .reset_index())
                
    df_aux = df_aux.loc[df_aux['Road_traffic_density'] != 'NaN' , :]
                
    #Eu quero em %, logo eu crio uma nova coluna dentro do df_aux
    df_aux['entregas_perc'] = df_aux['ID'] / df_aux['ID'].sum() #aqui vou somar as colunas e dividir pelas linhas e vai me dar um valor
                
    fig = px.pie(df_aux, values = 'entregas_perc' , names = 'Road_traffic_density') # aqui √© o gr√°fico de pizza com a sua nomenclatura

    return fig

def order_metric (df1):
    #Colunas
    cols = ['ID' , 'Order_Date']
    
    # Selecao de linhas
    df_aux = df1.loc[:, cols].groupby(['Order_Date'] ).count().reset_index() # Reseto o index para transformar o ORDER_DATE em coluna para na cria√ß√£o do gr√°fico ele ficar direitinho.
        
        
    #desenhar o Gr√°fico e linhas
    
    fig = px.bar( df_aux , x='Order_Date' , y= 'ID'  ) # -> passo a vari√°vel de dados (df_aux), depois as coordenadas dos eixos x e Y, o que vai ficar em cada eixo

    return fig

def clean_code (df1): # Dentro do parenteses eu preciso utilizar o Df1 que esta em toda linha de comando se n√£o pode dar errado.
    """ Esta fun√ß√£o tem a responsabilidade de limpar o dataframe

        Tipos de Limpeza:
        1. Remo√ß√£o dos dados NaN
        2. Mudan√ß√£ do tipo da coluna de dados
        3. Remo√ß√£o dos espa√ßos das v√°riaveis de texto
        4. Formata√ß√£o da coluna de datas
        5. Limpeza da coluna de tempo ( Remo√ß√£o do texto da vari√°vel num√©rica )

        Input: Dataframe
        Output: Dataframe
    """

    #1. convertendo a coluna Age de Texto para numero
    
    linhas_selecionadas = (df1[ 'Delivery_person_Age'] !='NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    linhas_selecionadas = (df1[ 'Road_traffic_density'] !='NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    linhas_selecionadas = (df1[ 'City'] !='NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    linhas_selecionadas = (df1[ 'Festival'] !='NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    df1['Delivery_person_Age'] = df1 ['Delivery_person_Age'].astype ( int )
    
    
    #2. Convertendo a coluna Ratings de texto para numero decimal ( FLOAT ) 
    
    df1['Delivery_person_Ratings'] = df1['Delivery_person_Ratings'] .astype( float )
    
    #3. Convertendo a coluna order_date de texto para data
    
    df1['Order_Date'] = pd.to_datetime (df1['Order_Date'], format = '%d-%m-%Y')
    
    #4. Convertendo multiple_deliveries de texto para numero inteiro ( INT ) 
    
    linhas_selecionadas = (df1[ 'multiple_deliveries'] !='NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    df1['multiple_deliveries'] = df1 ['multiple_deliveries'].astype ( int )
    
    #5. removendo espa√ßos pelo comando strip
    
    df1.loc[: , 'ID'] = df1.loc[ : , 'ID'].str.strip()
    
    df1.loc[: , 'Weatherconditions'] = df1.loc[ : , 'Weatherconditions'].str.strip()
    
    df1.loc[: , 'Road_traffic_density'] = df1.loc[ :, 'Road_traffic_density'].str.strip()
    
    df1.loc[: , 'Type_of_order'] = df1.loc[ : , 'Type_of_order'].str.strip()
    
    df1.loc[: , 'Type_of_vehicle'] = df1.loc[ : , 'Type_of_vehicle'].str.strip()
    
    #6. Limpando a coluna de time taken
    
    df1['Time_taken(min)'] = df1['Time_taken(min)'].apply (lambda  x: x.split ( '(min) ' )[1])
    
    df1['Time_taken(min)'] = df1['Time_taken(min)'].astype ( int )

    return df1

#---------------------------- Inicio da Estrutura l√≥gica do c√≥digo ------------------------------
#----------------------
#Import dataset
#----------------------
df = pd.read_csv('dataset/train.csv') # Leitura

#--------------------------
#Limpando os Dados
#--------------------------
df1 = clean_code (df) #Limpeza

#================================================================
#Barra Lateral
#================================================================
st.header('Marketplace - Vis√£o Cliente')

image_path = 'logo.jpg' # carregando imagem para dentro da pagina.
image = Image.open( image_path)
st.sidebar.image ( image, width=120)

st.sidebar.markdown ('# Cury Company') # Criando uma side bar do lado, um bot√£o que retrai e expande a barra.

st.sidebar.markdown ('## Fastest Delivery in Town')

st.sidebar.markdown ("""---""") # cria uma linha para separar um item do outro.

st.sidebar.markdown ('## Selecione uma data limite')

date_slider = st.sidebar.slider(
    'At√© qual valor?',
    value=datetime( 2022 , 4, 13),
    min_value=datetime( 2022, 2, 11),
    max_value=datetime( 2022, 4, 6),
    format= 'DD-MM-YYYY')
st.sidebar.markdown ("""---""")

traffic_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes do tr√¢nsito',
    ['Low', 'Medium', 'High', 'Jam'],
    default = ['Low', 'Medium', 'High', 'Jam'])

st.sidebar.markdown ("""---""")
st.sidebar.markdown ('### Powered by Comunidade DS')

# Filtro de Data
linhas_selecionadas = df1['Order_Date'] < date_slider
df1 = df1.loc[linhas_selecionadas, :]

# Filtro de transito

linhas_selecionadas = df1 ['Road_traffic_density'].isin ( traffic_options )
df1 = df1.loc[linhas_selecionadas, :] #ISIN = passa uma lista e verifica se o n√∫mero que passou esta dentro da lista, no caso o tr√°fico options.


st.dataframe (df1)

#================================================================

#LAYOUT NO STREAMLIT

#================================================================


#criando abas

tab1, tab2, tab3 = st.tabs ( ['Vis√£o Gerencial', 'Vis√£o T√°tica', 'Vis√£o Geogr√°fica'])

#Usando uma cl√°usula que √© uma palavra reservada do Python com identa√ß√£o (with), tudo que estiver dentro da identa√ß√£o de cada with vai ficar ali dentro.

with tab1: #dentro dessa tab
    with st.container():
        # Order Metric
        fig = order_metric (df1) #chamo a fun√ß√£o que vai fazer o gr√°fico
        st.markdown(' Orders by Day') #Titulo
        st.plotly_chart (fig, use_container_width = True) # Fun√ß√£o pr√≥rpia do streamlit que vai mostrar o gr√°fico, ele gaurda o fig=px.    
        
        
            #use container √© width √© para caber dentro da p√°gina.
    with st.container():
        #Criando colunas
        col1 , col2 = st.columns ( 2 ) #crio a coluna e guardo dentro de col1 e col2, e depois preciso colocar dentro do with mas antes eu preciso criar um container la no √≠nicio para isso aqui aparecer.
        with col1:
            fig = traffic_order_share ( df1 ) #Desenho a figura
            st.header ( 'Traffic Order Share') #Desenho o Titulo 
            st.plotly_chart (fig, use_container_width = True) #Coloco o desenho dentro do Container
                            
        with col2:
            fig = traffic_order_city (df1)
            st.header ( 'Traffic Order City')
            st.plotly_chart (fig, use_container_width = True)                         

with tab2:
    with st.container():
        st.markdown ('# Order by Week')
        fig = order_by_week (df1)
        st.plotly_chart (fig, use_container_width = True)
                                        
    with st.container():
         #aqui precisa fazer uma nova fun√ß√£o
        
#Quantidade de pedidos por semana / N√∫mero √∫nico de entregadores por semana , preciso fazer em duas partes
        
        # Primeira parte
        st.markdown ('Order Share by Week')
        fig = order_share_by_week(df1)
        st.plotly_chart (fig, use_container_width = True)

#consigo ver o n√∫mero de pedidos feito por entregadores. se preciso aumentar o n√∫mero de entregadores

with tab3:
    st.markdown ('#Country Maps ')
    country_maps (df1)
        
        
       
        
        

















